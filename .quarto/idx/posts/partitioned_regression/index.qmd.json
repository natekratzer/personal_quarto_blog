{"title":"Partitioned Regression with Palmer Penguins and Scikit-Learn","markdown":{"yaml":{"title":"Partitioned Regression with Palmer Penguins and Scikit-Learn","description":"Using partitioned regression to gain a better understanding of how linear regression works.","date":"2023-03-18","categories":["Python","Penguins","Statistics"],"toc":true,"image":"palmer_penguins.png"},"headingText":"Getting Started","containsRefs":false,"markdown":"\n\nPartitioned regression is a helpful way to gain more intuition for how regression works. What does it mean when we say that regression allows us to adjust for (or control for) other variables? By looking at a regression in multiple pieces we can gain a better understanding of what's happening and also produce a pretty cool visualization of our key result. (Partitioned regression could also come in handy if you ever have to run a regression on a computer with limited RAM, but that's not our focus here).\n\n\nLike most Python projects, we'll start by loading some libraries.\n\n* Numpy is standard for numerical arrays, and Pandas for dataframes and dataframe manipulation. \n* Altair is a visualization library. It's not as well known as matplotlib or Plotly, but I like the aesthetics of the plots it produces and I find it's grammar of graphics a bit more intuitive.\n* palmerpenguins is an easy way to load the demonstration data set I'll be using here. You could also download it as a .csv file from [here](https://github.com/allisonhorst/palmerpenguins/blob/main/inst/extdata/penguins.csv)\n* I'm using scikit-learn (sklearn) for the regression because it's a useful package to learn for additional work in Python. Statsmodels is another choice that would have worked well for everything in this post. \n\n```{python}\nimport numpy as np\nimport pandas as pd\nimport altair as alt\nfrom palmerpenguins import load_penguins\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\n```\n\nLoading the penguins data and showing the first few rows\n\n```{python}\ndf = load_penguins()\n\n# if you download the .csv instead of using the library\n# df = pd.read_csv(\"palmer_penguins.csv\")\n\ndf.head()\n```\n\n![Penguins illustrated by Allison Horst](palmer_penguins.png)\n\nThe penguins dataset is a small dataset that's useful for doing demonstrations for everyone who is tired of the iris dataset and thinks penguins are cute. \n\n## Preparing the data\n\nBefore we can run any regressions we need to clean up the data a bit. There's a row that is NA that we can drop and we have some categorical variables that can't be used directly. We'll remove the NA data and transform the categorical variables into a series of dichotomous variables that have the same information but can be used in our analysis.\n\n```{python}\ndf = df.dropna().reset_index() # if you don't reset the index then merging on index later will result in data mismatches and destroy your data silently. \nenc = preprocessing.OneHotEncoder(sparse_output = False) # important to have sparse_output = False for the array to be easily put back into a dataframe afterwards\nencoded_results = enc.fit_transform(df[['sex', 'species']])\n\n# names are not automatically preserved in this process, so if you want feature names you need to bring them back out. \ndf2 = pd.DataFrame(encoded_results, columns = enc.get_feature_names_out())\n\n# putting the dichotomous variables in along with everything else\n# this still has the original categorial versions, so check that everything lines up correctly\ndf = pd.concat([df, df2], axis = 1)\n\n#instead of using scikit-learns preprocessing features you could do this manually with np.where\n#df['male'] = np.where(df['sex'] == 'male', 1, 0)\n```\n\n## Partitioned regression\n\nLet's say we're interested in the relationship between bill depth and bill length. Bill length will be our dependent (or target) variable. We think there are things other than bill depth that are related to bill length, so we want to adjust for those when considering the relationship between depth and length. I'm going to put all of those other variables into a matrix called X. (For the dichotomous variables one category has to be left out).\n\nThen we're going to run three different regressions. First we'll regress bill length on all the X variables. Then we'll also regress bill depth on all of the X variables. Finally, we'll regress the residuals from the first regression on the residuals from the second regression. The residuals represent what is left unexplained about the dependent variable after accounting for the control variables. And by regressing both bill length and bill depth on the same set of control variables, we get residuals that can be thought of as bill length and bill depth after adjusting for everything in X. That lets us see the relationship between bill length and bill depth after accounting for anything else we think is relevant.  \n\n```{python}\n\ny = df['bill_length_mm'] # target variable\nz = df['bill_depth_mm'] # effect we're interested in\nX = df[['flipper_length_mm', 'body_mass_g', 'sex_female', 'species_Adelie', 'species_Chinstrap']] # other variables we want to adjust for\n\n\nmodel1 = LinearRegression().fit(X, y)\n#residuals aren't actually saved by scikit-learn, but we can create them from the original data and the predictions\nresiduals_y_on_X = (y - model1.predict(X))\n\nmodel2 = LinearRegression().fit(X, z)\nresiduals_z_on_X = (z - model2.predict(X))\n\n#need to reshape for scikit learn to work with a single feature input\nz_resids = residuals_z_on_X.to_numpy().reshape(-1, 1)\ny_resids = residuals_y_on_X.to_numpy().reshape(-1, 1)\n\npart_reg_outcome = LinearRegression().fit(z_resids, y_resids)\n\n#has to be np.round, not round. And has to be [0, 0] not [0] for a 1d array\nprint(\"The regression coefficient using partitioned regression is {}\".format(np.round((part_reg_outcome.coef_[0, 0]), 3)))\n```\n\nWe can also verify that we'd get the same result from an ordinary linear regression\n\n```{python}\n#add the bill depth variable back into the X array\nX2 = df[['bill_depth_mm', 'flipper_length_mm', 'body_mass_g', 'sex_female', 'species_Adelie', 'species_Chinstrap']]\n\n#here we can just use [0] for some reasons\nlr_outcome = LinearRegression().fit(X2, y)\nprint(\"The regression coefficient using linear regression is {}\".format(np.round(lr_outcome.coef_[0], 3)))\n```\n\nOne advantage of the partitioned regression is that it allows us to look at the relationship visually. Instead of just having the point estimate, standard error, and any test statistics (e.g. p-value) we can visually inspect a full scatterplot of the data. I've added a regression line, and the slope of the line is equal to the regression coefficients found above. You can visually see from this plot that it isn't a very strong relationship. \n\n```{python}\n#| warning: false\nplt_df = pd.DataFrame(data = {'Adjusted Bill Length': residuals_y_on_X, 'Adjusted Bill Depth': residuals_z_on_X})\n\nsp = alt.Chart(plt_df, title = \"Bill Depth and Bill Length (Adjusted)\").mark_circle().encode(\n    alt.X('Adjusted Bill Depth', scale = alt.Scale(zero = False)),\n    alt.Y('Adjusted Bill Length', scale = alt.Scale(zero = False)),\n)\n\nsp + sp.transform_regression('Adjusted Bill Depth', 'Adjusted Bill Length').mark_line()\n```\n\nA disadvantage of using scikit learn is that it doesn't give us traditional regression statistics. The easiest way to get those is through statsmodels, which shows the expected 0.313 coefficent and tells us the standard error is 0.154 with a p-value of .043. This tells us it is actually a statistically significant relationship, so without the visual evidence from the scatterplot above, we might assume it's a stronger relationship than it actually is. It is unlikely to have occured purely by chance, but that doesn't mean it's necessarily tightly correlated or has a large effect size. \n\n```{python}\nimport statsmodels.api as sm\n\n#unlike scikit learn, statsmodels does not add a constant for you unless you specify that you want one. \nX2 = sm.add_constant(X2)\nest = sm.OLS(y, X2).fit()\nest.summary2()\n```\n\n\nFinally, we might interested in how different this picture is from the unadjusted relationship between bill length and depth if we had not taken into account other variables\n\n```{python}\n#| warning: false\n\nsp = alt.Chart(df, title = \"Bill Depth and Bill Length (Unadjusted)\").mark_circle().encode(\n    alt.X('bill_depth_mm', title = 'Bill Depth', scale = alt.Scale(zero = False)),\n    alt.Y('bill_length_mm', title = 'Bill Length', scale = alt.Scale(zero = False)),\n)\n\nsp + sp.transform_regression('bill_depth_mm', 'bill_length_mm').mark_line()\n```\n\nThis difference and sign reversal is mostly because of the relationships between species, bill length, and bill depth. But that's a subject for a post about Simpson's paradox.  "},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":"cerulean","title-block-banner":false,"title":"Partitioned Regression with Palmer Penguins and Scikit-Learn","description":"Using partitioned regression to gain a better understanding of how linear regression works.","date":"2023-03-18","categories":["Python","Penguins","Statistics"],"image":"palmer_penguins.png"},"extensions":{"book":{"multiFile":true}}}}}